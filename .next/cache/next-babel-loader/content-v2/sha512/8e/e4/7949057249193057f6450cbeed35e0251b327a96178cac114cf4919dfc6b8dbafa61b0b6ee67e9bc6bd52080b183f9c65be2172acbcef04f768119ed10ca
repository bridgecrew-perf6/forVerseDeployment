{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\code23\\\\code\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Mongoclient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps(context) {\n  //fetching data for a single meetup\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  const dbConnectionString = 'mongodb+srv://shashikumar_mango:mtvClustorOlu4135987@cluster0.zmeix.mongodb.net/Database01reactDecember?retryWrites=true&w=majority';\n  const client = await MongoClient.connect(dbConnectionString);\n  const db = client.db();\n  const meetupsCollection = db.collection('newCollection');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const dbConnectionString = 'mongodb+srv://shashikumar_mango:mtvClustorOlu4135987@cluster0.zmeix.mongodb.net/Database01reactDecember?retryWrites=true&w=majority';\n  const connection = await Mongolient.connect(dbConnectionString);\n  const db = connection.db();\n  const collection = db.collection('newCollection');\n  const dataFetched = await collection.find({}, {\n    _id: 1\n  }).toArray();\n  connection.close();\n  console.log(dataFetched);\n  return {\n    fallback: false,\n    paths: dataFetched.map(data => ({\n      params: {\n        meetupId: data._id.toString()\n      }\n    }))\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["F:/code23/code/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Mongoclient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticProps","context","meetupId","params","console","log","dbConnectionString","client","MongoClient","connect","db","meetupsCollection","collection","selectedMeetup","findOne","_id","close","id","toString","getStaticPaths","connection","Mongolient","dataFetched","find","toArray","fallback","paths","map","data"],"mappings":";;AAAA,SAAQA,WAAR,EAAoBC,QAApB,QAAmC,SAAnC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAKD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC3C;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACE,MAAR,CAAeD,QAAhC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,QAAMI,kBAAkB,GAAE,qIAA1B;AAGA,QAAMC,MAAM,GAAG,MAAMC,WAAW,CAACC,OAAZ,CAAoBH,kBAApB,CAArB;AACA,QAAMI,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,eAAd,CAA1B;AAEA,QAAMC,cAAc,GAAG,MAAMF,iBAAiB,CAACG,OAAlB,CAA0B;AACrDC,IAAAA,GAAG,EAAExB,QAAQ,CAACW,QAAD;AADwC,GAA1B,CAA7B;AAIAK,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLtB,IAAAA,KAAK,EAAC;AACJC,MAAAA,UAAU,EAAC;AACTsB,QAAAA,EAAE,EAAEJ,cAAc,CAACE,GAAf,CAAmBG,QAAnB,EADK;AAETrB,QAAAA,KAAK,EAAEgB,cAAc,CAAChB,KAFb;AAGTC,QAAAA,OAAO,EAAEe,cAAc,CAACf,OAHf;AAITF,QAAAA,KAAK,EAAEiB,cAAc,CAACjB,KAJb;AAKTG,QAAAA,WAAW,EAAEc,cAAc,CAACd;AALnB;AADP;AADD,GAAP;AAWD;AAED,OAAO,eAAeoB,cAAf,GAA+B;AACpC,QAAMb,kBAAkB,GAAE,qIAA1B;AAGA,QAAMc,UAAU,GAAG,MAAMC,UAAU,CAACZ,OAAX,CAAmBH,kBAAnB,CAAzB;AACA,QAAMI,EAAE,GAAEU,UAAU,CAACV,EAAX,EAAV;AAEA,QAAME,UAAU,GAAGF,EAAE,CAACE,UAAH,CAAc,eAAd,CAAnB;AACA,QAAMU,WAAW,GAAE,MAAMV,UAAU,CAACW,IAAX,CAAgB,EAAhB,EAAmB;AAACR,IAAAA,GAAG,EAAC;AAAL,GAAnB,EAA4BS,OAA5B,EAAzB;AAEAJ,EAAAA,UAAU,CAACJ,KAAX;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYiB,WAAZ;AACA,SAAO;AACLG,IAAAA,QAAQ,EAAC,KADJ;AAELC,IAAAA,KAAK,EAAEJ,WAAW,CAACK,GAAZ,CAAgBC,IAAI,KAAG;AAACzB,MAAAA,MAAM,EAAC;AAACD,QAAAA,QAAQ,EAAC0B,IAAI,CAACb,GAAL,CAASG,QAAT;AAAV;AAAR,KAAH,CAApB;AAFF,GAAP;AAKD;AAED,eAAezB,aAAf","sourcesContent":["import {Mongoclient,ObjectId} from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n}\n\n\n\n\nexport async function getStaticProps(context){\n  //fetching data for a single meetup\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n\n  const dbConnectionString= 'mongodb+srv://shashikumar_mango:mtvClustorOlu4135987@cluster0.zmeix.mongodb.net/Database01reactDecember?retryWrites=true&w=majority';\n\n\n  const client = await MongoClient.connect(dbConnectionString);\n  const db = client.db();\n\n  const meetupsCollection = db.collection('newCollection');\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  return {\n    props:{\n      meetupData:{\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    }\n  }\n}\n\nexport async function getStaticPaths(){\n  const dbConnectionString= 'mongodb+srv://shashikumar_mango:mtvClustorOlu4135987@cluster0.zmeix.mongodb.net/Database01reactDecember?retryWrites=true&w=majority';\n\n\n  const connection = await Mongolient.connect(dbConnectionString);\n  const db= connection.db();\n\n  const collection = db.collection('newCollection');\n  const dataFetched= await collection.find({},{_id:1}).toArray();\n\n  connection.close();\n  console.log(dataFetched);\n  return {\n    fallback:false,\n    paths: dataFetched.map(data=>({params:{meetupId:data._id.toString()}}))\n  };\n\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}