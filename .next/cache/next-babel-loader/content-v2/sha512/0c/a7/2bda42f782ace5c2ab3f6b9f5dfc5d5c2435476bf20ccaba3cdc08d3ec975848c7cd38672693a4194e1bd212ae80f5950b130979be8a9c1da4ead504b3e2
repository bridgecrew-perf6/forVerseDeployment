{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\code23\\\\code\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\index.js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupList from '../components/meetups/MeetupList';\nimport Head from 'next/head';\nimport { Fragment } from 'react';\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"All Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"description\",\n      content: \"Use shouldComponentUpdate() to let React know if a component's output is not affected by the current change in state or props. The default behavior is to re- ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 7\n  }, this);\n}; // export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   // fetch data from an API\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     }\n//   };\n// }\n// export getStaticProps= async()=>{\n\n\nexport async function getStaticProps() {\n  const dbConnectionString = 'mongodb+srv://shashikumar_mango:mtvClustorOlu4135987@cluster0.zmeix.mongodb.net/Database01reactDecember?retryWrites=true&w=majority';\n  const connection = await MongoClient.connect(dbConnectionString);\n  const db = connection.db();\n  const meetupsCollection = db.collection('newCollection');\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(meetups);\n  connection.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["F:/code23/code/06-onwards-to-a-bigger-project-starting-project/pages/index.js"],"names":["MongoClient","MeetupList","Head","Fragment","HomePage","props","meetups","getStaticProps","dbConnectionString","connection","connect","db","meetupsCollection","collection","find","toArray","console","log","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAC,SAAQA,WAAR,QAA0B,SAA1B;AACD,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAQC,IAAR,MAAkB,WAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAEC,KAAD,IAAS;AAGpB,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUH,CAbD,C,CAgBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACE,OAAO,eAAeC,cAAf,GAA+B;AAEpC,QAAMC,kBAAkB,GAAE,qIAA1B;AAEA,QAAMC,UAAU,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoBF,kBAApB,CAAzB;AACA,QAAMG,EAAE,GAAGF,UAAU,CAACE,EAAX,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,eAAd,CAA1B;AAEA,QAAMP,OAAO,GAAG,MAAMM,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AAEAG,EAAAA,UAAU,CAACS,KAAX;AACF,SAAO;AACLb,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACa,GAAR,CAAaC,MAAD,KAAa;AAChCC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADkB;AAEhCC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFgB;AAGhCC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHkB;AAIhCC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJ4B,OAAb,CAAZ;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE;AATP,GAAP;AAWD;AAED,eAAevB,QAAf","sourcesContent":[" import {MongoClient} from 'mongodb';\r\nimport MeetupList from '../components/meetups/MeetupList'\r\nimport  Head from 'next/head';\r\nimport { Fragment } from 'react';\r\n\r\nconst HomePage=(props)=>{\r\n\r\n \r\n    return(\r\n      <Fragment>\r\n        <Head>\r\n          <title>All Meetups</title>\r\n        </Head>\r\n        <meta name=\"description\" content=\"Use shouldComponentUpdate() to let React know if a component's output is not affected by the current change in state or props. The default behavior is to re- ...\" />\r\n        <MeetupList meetups={props.meetups}/>\r\n      </Fragment>\r\n      \r\n    )\r\n}\r\n\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   // fetch data from an API\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS\r\n//     }\r\n//   };\r\n// }\r\n\r\n\r\n// export getStaticProps= async()=>{\r\n  export async function getStaticProps(){\r\n\r\n    const dbConnectionString= 'mongodb+srv://shashikumar_mango:mtvClustorOlu4135987@cluster0.zmeix.mongodb.net/Database01reactDecember?retryWrites=true&w=majority'\r\n\r\n    const connection = await MongoClient.connect(dbConnectionString);\r\n    const db = connection.db();\r\n    const meetupsCollection = db.collection('newCollection');\r\n\r\n    const meetups = await meetupsCollection.find().toArray();\r\n    console.log(meetups);\r\n\r\n    connection.close();\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n        id: meetup._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}